require import AllCore Distr List DBool.

(* types of keys *)
type pk_t, evk_t, sk_t.
(* msgs (messages) and ct_ts *)
type msg, ct_t.
(* supported homomorphic operations and their semantics *)
type op1.
type op2.
op interp1 : op1 -> msg -> msg.
op interp2 : op2 -> msg -> msg -> msg.

module type Scheme = {
  proc keygen() : pk_t * evk_t * sk_t
  proc encrypt(pk: pk_t, m: msg) : ct_t
  proc eval1(evk: evk_t, o: op1, c: ct_t) : ct_t option
  proc eval2(evk: evk_t, o: op2, c1: ct_t, c2: ct_t) : ct_t option
  proc dec(sk: sk_t, c: ct_t) : msg
}.

(* -- IND-CPA security -- *)
(* A standard definition already exists in EC standard library.
 * We formalize our own due to two mismatches:
 * 1. We want to include evaluation key here,
 *    as we take the convention that evk is separate from pk.
 * 2. The adversary chooses messages adaptively.
 * 3. We have query counting support. For reasons.
 *    (Because I don't know how to prove security otherwise...) *)

module type EncryptionOracle_t = {
  proc encrypt(m0: msg, m1: msg) : ct_t
}.

module type INDCPA_Adversary(O: EncryptionOracle_t) = {
  proc distinguish(pk: pk_t, evk: evk_t) : bool
}.

module EncryptionOracle(S: Scheme) : EncryptionOracle_t = {
  var b : bool
  var pk : pk_t
  var queries_remaining : int

  proc init(b_i, pk_i, max_queries) = {
    b <- b_i;
    pk <- pk_i;
    queries_remaining <- max_queries;
  }

  proc encrypt(m0, m1) = {
    var result;
    queries_remaining <- queries_remaining - 1;
    if(0 < queries_remaining) {
      result <@ S.encrypt(pk, if b then m0 else m1);
    } else {
      result <- witness;
    }
    return result;
  }
}.

module INDCPA_Game(S: Scheme)(A: INDCPA_Adversary) = {
  proc main(max_queries) = {
    var b, b';
    var pk, evk, sk;
    b <$ {0,1};
    (pk, evk, sk) <@ S.keygen();
    EncryptionOracle(S).init(b, pk, max_queries);
    b' <@ A(EncryptionOracle(S)).distinguish(pk, evk);
    return (b = b');
  }
}.

(* IND-CPA+ Game
 * The adversary additionally gains access to a decryption oracle.
 * The decryption oracle can only be called on correct evaluation results however. *)

module type INDCPAD_Oracle_t = {
  proc encrypt(m0: msg, m1: msg) : ct_t
  proc evaluate1(o: op1, i: int) : ct_t option
  proc evaluate2(o: op2, i: int, j: int) : ct_t option
  proc reveal(i: int) : msg option
}.

module INDCPAD_Oracle(S: Scheme) : INDCPAD_Oracle_t = {
  var b : bool
  var pk : pk_t
  var evk : evk_t
  var sk : sk_t
  var evaluations : (msg * msg * ct_t option) list
  var max_queries : int

  proc init(b_in, pk_in, evk_in, sk_in, max_queries_in) = {
    b <- b_in;
    pk <- pk_in;
    evk <- evk_in;
    sk <- sk_in;
    max_queries <- max_queries_in;
  }

  proc encrypt(m0 : msg, m1 : msg) = {
    var c;
    if(size evaluations < max_queries) {
      c <@ S.encrypt(pk, if b then m0 else m1);
      evaluations <- (m0, m1, Some c) :: evaluations;
    } else {
      c <- witness;
    }
    return c;
  }

  proc evaluate1(o: op1, i: int) = {
    var m0_i, m1_i, c_i;
    var m0, m1, c;
    (m0_i, m1_i, c_i) <- nth (witness, witness, None) evaluations i;
    m0 <- interp1 o m0_i;
    m1 <- interp1 o m1_i;
    if(c_i <> None /\ size evaluations < max_queries) {
      c <@ S.eval1(evk, o, (oget c_i));
      evaluations <- (m0, m1, c) :: evaluations;
    } else {
      c <- None;
    }
    return c;
  }

  proc evaluate2(o: op2, i: int, j: int) = {
    var m0_i, m1_i, c_i;
    var m0_j, m1_j, c_j;
    var m0, m1, c;
    (m0_i, m1_i, c_i) <- nth (witness, witness, None) evaluations i;
    (m0_j, m1_j, c_j) <- nth (witness, witness, None) evaluations j;
    m0 <- interp2 o m0_i m0_j;
    m1 <- interp2 o m1_i m1_j;
    if(c_i <> None /\ c_j <> None /\ size evaluations < max_queries) {
      c <@ S.eval2(evk, o, oget c_i, oget c_j);
      evaluations <- (m0, m1, c) :: evaluations;
    } else {
      c <- None;
    }
    return c;
  }

  proc reveal(i: int) = {
    var m0, m1, m, c;
    var result;
    (m0, m1, c) <- nth (witness, witness, None) evaluations i;
    if(m0 = m1) {
      m <@ S.dec(sk, oget c);
      result <- Some m;
    } else {
      result <- None;
    }
    return result;
  }
}.

module type INDCPAD_Adversary(O: INDCPAD_Oracle_t) = {
  proc distinguish(pk: pk_t, evk: evk_t) : bool
}.

module INDCPAD_Game(S: Scheme)(A: INDCPAD_Adversary) = {
  proc main(max_queries) = {
    var b, b';
    var pk, evk, sk;
    b <$ {0,1};
    (pk, evk, sk) <@ S.keygen();
    INDCPAD_Oracle(S).init(b, pk, evk, sk, max_queries);
    b' <@ A(INDCPAD_Oracle(S)).distinguish(pk, evk);
    return (b = b');
  }
}.
