require import AllCore Distr List Ring.
require import DiscreteGaussian.
require ApproxCorrectFHE.
require Matrix.

(* poly degrees *)
op n : {int | 0 <= n} as ge0_n.
op max_queries : int.
op security_parameter : int.

clone import Matrix as IntVector with
  type ZR.t <- int,
  pred ZR.unit (z : int) <- (z = 1 \/ z = -1),
  op   ZR.zeror <- 0,
  op   ZR.oner  <- 1,
  op   ZR.( + ) <- Int.( + ),
  op   ZR.([ - ]) <- Int.([-]),
  op   ZR.( * ) <- Int.( * ),
  op   ZR.invr  <- (fun (z : int) => z),
  op size <- n
proof ge0_size by exact ge0_n
proof ZR.* by smt()
(* These are unavoidable and unprovable subtype axioms from the "old" way of doing things.
 * Can't be fucked to fix the standard library. *)
proof * by admit.

clone import ApproxCorrectFHE as InputFHE with
  type msg <- vector,
  op ( * ) <- IntVector.Vector.( + ),
  op e <- zerov
(* abelian group axioms...? *)
proof mulcC by exact Vector.ZModule.AddMonoid.addmC
proof mul1c by exact Vector.ZModule.AddMonoid.add0m
(* TODO prove mulcA and mulVc too *).

module GaussianMechanism : Scheme = {
  proc keygen = OpBased.keygen
  proc encrypt = OpBased.encrypt
  proc eval1 = OpBased.eval1
  proc eval2 = OpBased.eval2
  proc dec(sk, c) = {
    var result, e, t;
    result <@ OpBased.dec(sk, c);
    t <- error_bound c;
    e <$ dvector (discrete_gaussian ((64 * max_queries * 2 ^ security_parameter)%r * t * t));
    return result + e;
  }
}.

module (Reduction(A: INDCPAD_Adversary) : INDCPA_Adversary)(O: EncryptionOracle_t) = {
  proc distinguish(pk: pk_t, evk: evk_t) = {
    (* TODO *)
    return false;
  }
}.

section.

declare module A <: INDCPAD_Adversary.

(* The parameters are probably wrong.
 * Will fix as we get closer to this. *)
lemma GaussianMechanismSecure q &m :
  Pr[INDCPAD_Game(GaussianMechanism, A).main(q) @ &m : res] <
  Pr[INDCPA_Game(OpBased, Reduction(A)).main(q) @ &m : res] + (2 ^ (- security_parameter))%r.
proof.
admitted.

end section.

print GaussianMechanismSecure.
